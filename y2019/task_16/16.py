import math
import numpy as np

data = '59791875142707344554745984624833270124746225787022156176259864082972613206097260696475359886661459314067969858521185244807128606896674972341093111690401527976891268108040443281821862422244152800144859031661510297789792278726877676645835805097902853584093615895099152578276185267316851163313487136731134073054989870018294373731775466754420075119913101001966739563592696702233028356328979384389178001923889641041703308599918672055860556825287836987992883550004999016194930620165247185883506733712391462975446192414198344745434022955974228926237100271949068464343172968939069550036969073411905889066207300644632441054836725463178144030305115977951503567'
# Part2 takes too long :(
data = '59791875142707344554745984624833270124746225787022156176259864082972613206097260696475359886661459314067969858521185244807128606896674972341093111690401527976891268108040443281821862422244152800144859031661510297789792278726877676645835805097902853584093615895099152578276185267316851163313487136731134073054989870018294373731775466754420075119913101001966739563592696702233028356328979384389178001923889641041703308599918672055860556825287836987992883550004999016194930620165247185883506733712391462975446192414198344745434022955974228926237100271949068464343172968939069550036969073411905889066207300644632441054836725463178144030305115977951503567'*10000
# data = '12345678'
data = [int(char) for char in data]
npdata = np.array(data)
part = 'part2'
if part == 'part1':
    base_pattern = [0, 1, 0, -1]
    # loop
    for reps in range(100):
        out_list = []
        for phase in range(len(data)):
            out = 0
            phase_pattern = [item for sublist in [[ele]*(phase+1) for ele in base_pattern] for item in sublist]
            for idx, element in enumerate(data):
                out += element*phase_pattern[(idx+1)%len(phase_pattern)]
            out_list.append(abs(out)%10)
        data = out_list
        print(reps)
    print(offset)  # Part1
else:
    # Part2

    def selector_pos(phase, data_len):
        single = np.array([i*4*(phase+1)+phase for i in range(math.ceil((data_len-phase)/(4*(phase+1))))])
        final = np.array(single)
        if len(single) > 0:
            for i in range(phase):
                if single[-1]+i+1 >= data_len:
                    single = single[:-1]
                    break
                final = np.append(final, single+i+1)
        return final

    def selector_neg(phase, data_len):
        single = np.array([list(range(i-2-phase, i-1)) for i in range((phase+1)*4, data_len+1, 4*(phase+1))])
        return [item for sublist in single for item in sublist]

    data_len = len(npdata)
    for reps in range(100):
        out_list = []
        for phase in range(data_len):
            out_list.append(abs(sum(npdata[selector_pos(phase, data_len)]) - sum(npdata[selector_neg(phase, data_len)]))%10)
        npdata = np.array(out_list)
        print(out_list)

